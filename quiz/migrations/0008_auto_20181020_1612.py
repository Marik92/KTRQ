# Generated by Django 2.1 on 2018-10-20 10:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('quiz', '0007_quiz'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=250, null=True, unique=True, verbose_name='Категория теста')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Результат')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Прогресс пользователя',
                'verbose_name_plural': 'Записи прогресса пользователя',
            },
        ),
        migrations.CreateModel(
            name='Sitting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_order', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Список PKs вопросов в данном тесте')),
                ('question_list', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Список PKs неотвеченных вопросов')),
                ('incorrect_questions', models.CharField(blank=True, max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Список PKs вопросов с неправильным ответом')),
                ('current_score', models.IntegerField(verbose_name='Текущий результат')),
                ('complete', models.BooleanField(default=False, verbose_name='Завершен')),
                ('user_answers', models.TextField(blank=True, default='{}', verbose_name='Ответы пользователя')),
                ('start', models.DateTimeField(auto_now_add=True, verbose_name='Начало теста')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='Конец теста')),
            ],
            options={
                'permissions': (('view_sittings', 'Can see completed exams.'),),
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_category', models.CharField(blank=True, max_length=250, null=True, verbose_name='Под-Категория')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quiz.Category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Под-Категория',
                'verbose_name_plural': 'Под-Категории',
            },
        ),
        migrations.DeleteModel(
            name='questionNumber',
        ),
        migrations.RemoveField(
            model_name='resultdata',
            name='name_user',
        ),
        migrations.DeleteModel(
            name='timeOut_answers',
        ),
        migrations.AddField(
            model_name='question',
            name='figure',
            field=models.ImageField(blank=True, null=True, upload_to='uploads/%Y/%m/%d', verbose_name='Рисунок'),
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ManyToManyField(blank=True, to='quiz.Quiz', verbose_name='Тест'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='answers_at_end',
            field=models.BooleanField(default=False, help_text='Если да, после ответа пользователя на вопрос, будет показан правильный вариант', verbose_name='Правильный ответ в конце'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='description',
            field=models.TextField(blank=True, help_text='Введите описание теста', verbose_name='Описание теста'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='fail_text',
            field=models.TextField(blank=True, help_text='Показывает введенный текст если пользователь провалил тест.', verbose_name='Объявление в случае провала теста'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='max_questions',
            field=models.PositiveIntegerField(blank=True, help_text='Максимальное количество вопросов за одну попытку сдачи теста', null=True, verbose_name='Максимальное кол-во вопросов'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='random_order',
            field=models.BooleanField(default=True, help_text='Если да, показывает вопросы в случайной последовательности', verbose_name='Случайная последовательность выдачи вопросов'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='single_attempt',
            field=models.BooleanField(default=False, help_text='Если да, то будет разрешена только одна попытка сдачи теста. Незарегиситрированные пользователи не смогут сдать экзамен.', verbose_name='Одна попытка?'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='success_text',
            field=models.TextField(blank=True, help_text='Показывает введенный текст если пользователь сдал тест.', verbose_name='Объявление в случае сдачи теста'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='title',
            field=models.CharField(help_text='Введите название теста', max_length=60, verbose_name='Название теста'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='url',
            field=models.SlugField(help_text='Читаемая url-ссылка для пользователя', max_length=60, verbose_name='user friendly url'),
        ),
        migrations.DeleteModel(
            name='resultData',
        ),
        migrations.AddField(
            model_name='sitting',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.Quiz', verbose_name='Тест'),
        ),
        migrations.AddField(
            model_name='sitting',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='question',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quiz.Category', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='question',
            name='sub_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quiz.SubCategory', verbose_name='Под-Категория'),
        ),
        migrations.AddField(
            model_name='quiz',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quiz.Category', verbose_name='Категория'),
        ),
    ]
